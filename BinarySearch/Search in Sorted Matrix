import java.util.Arrays;

public class SortedMatrixArray {
    public static void main(String[] args) {

        int[][] arr ={
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };
     int target = 6;
        System.out.println(Arrays.toString(search(arr, target)));
        
    }
    //rearch the rows provieded between the cols provided
    static int[] binarySearch(int[][] nums,int row, int cstart, int cend, int target)
    {
        int start = cstart;
        int end = cend;

        while(start <= end)
        {
            int mid = start + (end - start)/2;

            if(nums[row][mid] == target)
            {
                return new int[] {row, mid};
            }
           if(nums[row][mid] < target)
            {
                start = mid+1;
            }
            else
            {
                end = mid-1;
            }
        }
        return new int[] {-1,-1};
    }

    static int[] search(int[][] matrix, int target)
    {
        int row = matrix.length;
        int col = matrix[0].length; //be caution matrix may be empty

        if(row == 1)
        {
            return binarySearch(matrix, 0, 0, col-1, target);
        }

      int rStart =0;
      int rEnd = row-1;
      int cMid = col/2;

      //run the loop till 2 rows remaining
      while(rStart < (rEnd -1))// while this is true it will have more then two element 
      {
        int mid = rStart + (rEnd - rStart);
        if(matrix[mid][cMid] == target)
        {
            return new int[]{mid, cMid};
        }
        if(matrix[mid][cMid] < target)
        {
            rStart = mid;
        }
        else{
            rEnd = mid;
        }
      }
      //now we have two rows
      // check whether the target is in the col of 2 rows
      if(matrix[rStart][cMid] == target)
          return new int[]{rStart, cMid};
      
      if(matrix[rStart + 1][cMid] == target)
          return new int[]{rStart + 1, cMid};

      //Search in 1st half
      if (target <= matrix[rStart][cMid -1])
      {
        return binarySearch(matrix, 0, 0, cMid-1, target);
      }

      //Search in 2st half
      if(target <= matrix[rStart][cMid +1] && target <= matrix[rStart][cMid +1])
      {
        return binarySearch(matrix, rStart, cMid +1, col-1, target);
      }

      //Search in 3st half
      if (target <= matrix[rStart + 1 ][cMid -1])
      {
        return binarySearch(matrix, rStart+1, 0, cMid-1, target);
        
      }
      else             //if (target <= martix([rStart +1 ][cMid +1]))
      {
        return binarySearch(matrix, rStart+1, cMid + 1, col-1, target);
        
      }
    }
}
