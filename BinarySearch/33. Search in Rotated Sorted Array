class Solution {
    public int search(int[] nums, int target) {
        {
        int pivot = findPivot(nums); 
        int start = 0, end = nums.length-1;

        // if did you find a pivot, it means the array is not rotated
        if(pivot == -1)
        {
            //just retrun normal binary search
            return binarySearch(nums, target, start, end);
        }
          // if pivot is found, you have 2asc sorted arrays
        if(nums[pivot] == target)
        {
            return pivot;
        }
        
        if( target >= nums[0])
        {
            return binarySearch(nums, target, 0,pivot-1);
        }
        return binarySearch( nums,target,pivot+1,end);

    }
    }

  int binarySearch(int[] nums,int target,int start,int end){
      while(start <=  end){
          //find the middle element
          //int mid =( start + end ) / 2; // might be possuble that ( start + end )
            int mid = start + (end - start)/2;

            if(nums[mid] == target)
            {
                return mid;
            }
            else if(nums[mid] > target)
            {
                end = mid - 1;
            }
            else if(nums[mid] < target)
            {
                start = mid + 1;
            }
           
        }
      return -1;
  } 
    

   int findPivot(int[] nums)
    {
        int start = 0;
        int end = nums.length-1;
        while(start <= end)
        {
            int mid = start + (end - start)/2;
            // 4 casees over here
             
             if(mid < end && nums[mid] > nums[mid+1])
             { return mid;  }
            
             if(mid > start && nums[mid] < nums[mid-1])
             {
                 return mid-1;
             }
             if(nums[start] >= nums[mid])
             {
                end = mid-1;
             }
            else{
                start = mid+1;
             }
        }
        return -1;
    }
        
    
}
